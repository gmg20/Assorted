library(tidyverse)
library(psych)
library(readr)
pfs<-read.csv("/pfs.csv")
pfs<-read.csv("~pfs.csv")
getwd()
pfs<-read.csv("pfs.csv")
View(pfs)
names(pfs)<-tolower(names(pfs))
library(psychTools)
install.packages("psychTools")
library(psychTools)
pairs.panels(pfs)
pairs.panels(pfs[1:5])
lowerCor(pfs)
corPlot(pfs)
describe(pfs)
fa.parallel(pfs, fm="paf")
?fa.parallel()
fa.parallel(pfs, fm="pa", fa="fa")
vss(pfs)
hist(pfs)
hist(pfs[,1:20])
hist(pfs[,1])
lapply(pfs,2,hist)
?lapply()
apply(pfs,2,hist)
install.packages("EFA.dimensions")
library(EFA.dimensions)
MAP(pfs)
fa.parallel(pfs, fm="pa", fa="fa")
fa.parallel(pfs, fm="pa", fa="both")
fa.parallel(pfs, fm="pa", fa="fa")
iclust(pfs)
pfic<-iclust(pfs)
summary(pfic)
pfs.poly<-polychoric(pfs)
pfs.poly
vss(pfs)
fa.parallel(pfs, fm="ml", fa="fa") # Parallel says 5
?fa.parallel
?fa()
# Perform FA
fa(pfs, nfactors = 1, rotate = "oblimin", fm = "pa")
fa(pfs, nfactors = 3, fm = "pa")
# Perform FA
# PA with 1 Factor & 3 Factors
m1_1<-fa(pfs, nfactors = 1, rotate = "oblimin", fm = "pa")
m1_3fa(pfs, nfactors = 3, fm = "pa")
# ML with 1 & 3 Factors
m2_1<-fa(pfs, nfactors = 1, fm = "ml")
m1_3<-fa(pfs, nfactors = 3, rotate = "oblimin", fm = "pa")
# ML with 1 & 3 Factors
m2_1<-fa(pfs, nfactors = 1, rotate = "oblimin", fm = "ml")
m2_3<-fa(pfs, nfactors = 3, rotate = "oblimin", fm = "ml")
m2_3
fa.parallel(pfs, fm="ml", fa="fa") # Parallel says 5
?fa()
fa_table <- function(x, cut) {
#get sorted loadings
loadings <- fa.sort(x)$loadings %>% round(3)
#supress loadings
loadings[loadings < cut] <- ""
#get additional info
add_info <- cbind(x$communalities,
x$uniquenesses,
x$complexity) %>%
# make it a data frame
as.data.frame() %>%
# column names
rename("Communality" = V1,
"Uniqueness" = V2,
"Complexity" = V3) %>%
#get the item names from the vector
rownames_to_column("item")
#build table
loadings %>%
unclass() %>%
as.data.frame() %>%
rownames_to_column("item") %>%
left_join(add_info) %>%
mutate(across(where(is.numeric), round, 3))
}
fa_table(m2_3, 0.3)
# table set-up ----
flex <- function(data, title=NULL) {
# this grabs the data and converts it to a flextbale
flextable(data) %>%
# this makes the table fill the page width
set_table_properties(layout = "autofit", width = 1) %>%
# font size
fontsize(size=10, part="all") %>%
#this adds a ttitlecreates an automatic table number
set_caption(title,
autonum = officer::run_autonum(seq_id = "tab",
pre_label = "Table ",
post_label = "\n",
bkm = "anytable")) %>%
# font type
font(fontname="Times New Roman", part="all")
}
fa_table(m2_3, 0.3) %>% "A Pretty EFA Table"
fa_table(m2_3, 0.3) %>% flex("A Pretty EFA Table")
library(palmerpenguins)
install.packages("palmerpenguins")
install.packages("flextable")
library(palmerpenguins)
library(flextable)
library(palmerpenguins)
library(tidyverse)
library(psych)
library(flextable)
# table set-up ----
flex <- function(data, title=NULL) {
# this grabs the data and converts it to a flextbale
flextable(data) %>%
# this makes the table fill the page width
set_table_properties(layout = "autofit", width = 1) %>%
# font size
fontsize(size=10, part="all") %>%
#this adds a ttitlecreates an automatic table number
set_caption(title,
autonum = officer::run_autonum(seq_id = "tab",
pre_label = "Table ",
post_label = "\n",
bkm = "anytable")) %>%
# font type
font(fontname="Times New Roman", part="all")
}
fa_table <- function(x, cut) {
#get sorted loadings
loadings <- fa.sort(x)$loadings %>% round(3)
#supress loadings
loadings[loadings < cut] <- ""
#get additional info
add_info <- cbind(x$communalities,
x$uniquenesses,
x$complexity) %>%
# make it a data frame
as.data.frame() %>%
# column names
rename("Communality" = V1,
"Uniqueness" = V2,
"Complexity" = V3) %>%
#get the item names from the vector
rownames_to_column("item")
#build table
loadings %>%
unclass() %>%
as.data.frame() %>%
rownames_to_column("item") %>%
left_join(add_info) %>%
mutate(across(where(is.numeric), round, 3))
}
fa_table(m2_3, 0.3) %>% flex("A Pretty EFA Table")
fa_table(m2_3, 0.2) %>% flex("A Pretty EFA Table")
fa_table(m2_3, 0.2) %>% flex("MLE EFA 3 Factor Solution")
fa_table(m1_3, 0.2) %>% flex("PA EFA 3 Factor Solution")
m2_2<-fa(pfs, nfactors = 2, rotate = "oblimin", fm = "ml")
m1_2<-fa(pfs, nfactors = 2, rotate = "oblimin", fm = "pa")
fa_table(m1_1, 0.3) %>% flex("PA EFA 1 Factor Solution")
fa_table(m1_2, 0.3) %>% flex("PA EFA 2 Factor Solution")
fa_table(m1_3, 0.3) %>% flex("PA EFA 3 Factor Solution")
fa_table(m2_1, 0.3) %>% flex("ML EFA 3 Factor Solution")
fa_table(m2_2, 0.3) %>% flex("ML EFA 3 Factor Solution")
fa_table(m2_3, 0.3) %>% flex("ML EFA 3 Factor Solution")
m1_1
summary(m1_1)
fa(pfs, nfactors=1, fm="pa")
m1_1
fa.sort(m1_1)$loadings
fa.sort(m1_1)$loadings %>% round(3)
m1_1$communalities
m1_1$h2
attributes(m1_1)
m1_1$communality
m1_1$uniquenesses
library(palmerpenguins)
library(tidyverse)
library(psych)
library(flextable)
# table set-up ----
flex <- function(data, title=NULL) {
# this grabs the data and converts it to a flextbale
flextable(data) %>%
# this makes the table fill the page width
set_table_properties(layout = "autofit", width = 1) %>%
# font size
fontsize(size=10, part="all") %>%
#this adds a ttitlecreates an automatic table number
set_caption(title,
autonum = officer::run_autonum(seq_id = "tab",
pre_label = "Table ",
post_label = "\n",
bkm = "anytable")) %>%
# font type
font(fontname="Times New Roman", part="all")
}
fa_table <- function(x, cut) {
#get sorted loadings
loadings <- fa.sort(x)$loadings %>% round(3)
#supress loadings
loadings[loadings < cut] <- ""
#get additional info
add_info <- cbind(x$communality,
x$uniquenesses,
x$complexity) %>%
# make it a data frame
as.data.frame() %>%
# column names
rename("Communality" = V1,
"Uniqueness" = V2,
"Complexity" = V3) %>%
#get the item names from the vector
rownames_to_column("item")
#build table
loadings %>%
unclass() %>%
as.data.frame() %>%
rownames_to_column("item") %>%
left_join(add_info) %>%
mutate(across(where(is.numeric), round, 3))
}
# Tables for SimpStruc
fa_table(m1_1, 0.3) %>% flex("PA EFA 1 Factor Solution")
fa_table(m1_2, 0.3) %>% flex("PA EFA 2 Factor Solution")
fa_table(m1_3, 0.3) %>% flex("PA EFA 3 Factor Solution")
fa_table(m2_1, 0.3) %>% flex("ML EFA 3 Factor Solution")
fa_table(m2_2, 0.3) %>% flex("ML EFA 3 Factor Solution")
fa_table(m2_3, 0.3) %>% flex("ML EFA 3 Factor Solution")
fa_table(m1_1, 0.3) %>% flex("PA EFA 1 Factor Solution")
fa_table(m1_2, 0.3) %>% flex("PA EFA 2 Factor Solution")
fa_table(m1_3, 0.3) %>% flex("PA EFA 3 Factor Solution")
fa_table(m2_1, 0.3) %>% flex("ML EFA 1 Factor Solution")
fa_table(m2_2, 0.3) %>% flex("ML EFA 2 Factor Solution")
fa_table(m2_3, 0.3) %>% flex("ML EFA 3 Factor Solution")
fa_table(m1_1, 0.4) %>% flex("PA EFA 1 Factor Solution")
fa_table(m1_2, 0.4) %>% flex("PA EFA 2 Factor Solution")
fa_table(m1_3, 0.4) %>% flex("PA EFA 3 Factor Solution")
fa_table(m2_1, 0.4) %>% flex("ML EFA 1 Factor Solution")
fa_table(m2_2, 0.4) %>% flex("ML EFA 2 Factor Solution")
fa_table(m2_3, 0.4) %>% flex("ML EFA 3 Factor Solution")
# Selected 3 Factor solution (MLE and PA were equivalent)
m2_3
plot(m2_3)
m2_3<-fa(pfs, nfactors = 3, rotate = "oblimin", fm = "ml")
fa_table(m2_3, 0.4) %>% flex("ML EFA 3 Factor Solution")
fa.diagram(m2_3)
fa_table(m2_3, 0.4) %>% flex("ML EFA 3 Factor Solution")
m1_4<-fa(pfs, nfactors = 4, rotate = "oblimin", fm = "pa")
library(tidyverse)
library(psych)
library(psychTools)
library(readr)
library(EFA.dimensions)
m1_4<-fa(pfs, nfactors = 4, rotate = "oblimin", fm = "pa")
fa_table(m1_4, 0.4) %>% flex("PA EFA 4 Factor Solution")
library(palmerpenguins)
library(tidyverse)
library(psych)
library(flextable)
flex <- function(data, title=NULL) {
# this grabs the data and converts it to a flextbale
flextable(data) %>%
# this makes the table fill the page width
set_table_properties(layout = "autofit", width = 1) %>%
# font size
fontsize(size=10, part="all") %>%
#this adds a ttitlecreates an automatic table number
set_caption(title,
autonum = officer::run_autonum(seq_id = "tab",
pre_label = "Table ",
post_label = "\n",
bkm = "anytable")) %>%
# font type
font(fontname="Times New Roman", part="all")
}
fa_table <- function(x, cut) {
#get sorted loadings
loadings <- fa.sort(x)$loadings %>% round(3)
#supress loadings
loadings[loadings < cut] <- ""
#get additional info
add_info <- cbind(x$communality,
x$uniquenesses,
x$complexity) %>%
# make it a data frame
as.data.frame() %>%
# column names
rename("Communality" = V1,
"Uniqueness" = V2,
"Complexity" = V3) %>%
#get the item names from the vector
rownames_to_column("item")
#build table
loadings %>%
unclass() %>%
as.data.frame() %>%
rownames_to_column("item") %>%
left_join(add_info) %>%
mutate(across(where(is.numeric), round, 3))
}
fa_table(m1_4, 0.4) %>% flex("PA EFA 4 Factor Solution")
m1_5<-fa(pfs, nfactors = 5, rotate = "olbimin", fm = "pa")
m1_5<-fa(pfs, nfactors = 5, rotate = "oblimin", fm = "pa")
fa_table(m1_5, 0.4) %>% flex("PA EFA 5 Factor Solution")
fa_table(m1_4, 0.4) %>% flex("PA EFA 4 Factor Solution")
fa_table(m1_4, 0.4) %>% flex("PA EFA 4 Factor Solution")
fa.parallel(pfs, fm="ml", fa="fa") # Parallel says 5
fa.parallel(pfs, fm="pa", fa="fa") # Parallel says 5
m1_4
?fa()
?MAP()
?iclust()
?fa.diagram()
# Selected 4 Factor solution (MLE and PA were equivalent)
m1_4
plot(m1_4)
fa.diagram(m1_4)
fa.diagram(m1_4, cut = 0.1)
fa.diagram(m1_4, cut = 0.4)
fa.diagram(m1_4, cut = 0.4, e.cut = 0.1)
library(palmerpenguins)
library(tidyverse)
library(psych)
library(flextable)
library(palmerpenguins)
library(tidyverse)
library(psych)
library(flextable)
flex <- function(data, title=NULL) {
# this grabs the data and converts it to a flextbale
flextable(data) %>%
# this makes the table fill the page width
set_table_properties(layout = "autofit", width = 1) %>%
# font size
fontsize(size=10, part="all") %>%
#this adds a ttitlecreates an automatic table number
set_caption(title,
autonum = officer::run_autonum(seq_id = "tab",
pre_label = "Table ",
post_label = "\n",
bkm = "anytable")) %>%
# font type
font(fontname="Times New Roman", part="all")
}
fa_table <- function(x, cut) {
#get sorted loadings
loadings <- fa.sort(x)$loadings %>% round(3)
#supress loadings
loadings[loadings < cut] <- ""
#get additional info
add_info <- cbind(x$communality,
x$uniquenesses,
x$complexity) %>%
# make it a data frame
as.data.frame() %>%
# column names
rename("Communality" = V1,
"Uniqueness" = V2,
"Complexity" = V3) %>%
#get the item names from the vector
rownames_to_column("item")
#build table
loadings %>%
unclass() %>%
as.data.frame() %>%
rownames_to_column("item") %>%
left_join(add_info) %>%
mutate(across(where(is.numeric), round, 3))
}
fa_table(m1_4, 0.4) %>% flex("PA EFA 4 Factor Solution")
summary(m1_4)
summary(m1_5)
summary(m1_2)
m1_4
fa_table(m1_4) %>% flex("PA EFA 4 Factor Solution")
fa_table(m1_4, cut = 0) %>% flex("PA EFA 4 Factor Solution")
plot(m1_4)
fa.diagram(m1_4)
?fa.diagram()
m2_2<-fa(pfs, nfactors = 2, rotate = "oblimin", fm = "ml")
fa_table(m1_2, 0.4) %>% flex("PA EFA 2 Factor Solution")
pfic<-iclust(pfs)
summary(pfic) # Hierarchical Cluster algo based on reliability says 1
?iclust()
# table set-up ----
flex <- function(data, title=NULL) {
# this grabs the data and converts it to a flextbale
flextable(data) %>%
# this makes the table fill the page width
set_table_properties(layout = "autofit", width = 1) %>%
# font size
fontsize(size=10, part="all") %>%
#this adds a ttitlecreates an automatic table number
set_caption(title,
autonum = officer::run_autonum(seq_id = "tab",
pre_label = "Table ",
post_label = "\n",
bkm = "anytable")) %>%
# font type
font(fontname="Times New Roman", part="all")
}
fa_table <- function(x, cut) {
#get sorted loadings
loadings <- fa.sort(x)$loadings %>% round(3)
#supress loadings
loadings[loadings < cut] <- ""
#get additional info
add_info <- cbind(x$communality,
x$uniquenesses,
x$complexity) %>%
# make it a data frame
as.data.frame() %>%
# column names
rename("Communality" = V1,
"Uniqueness" = V2,
"Complexity" = V3) %>%
#get the item names from the vector
rownames_to_column("item")
#build table
loadings %>%
unclass() %>%
as.data.frame() %>%
rownames_to_column("item") %>%
left_join(add_info) %>%
mutate(across(where(is.numeric), round, 3))
}
m1_4
MAP(pfs) # 1976 MAP says 1, 2000 says 3
library(psych)
fa.parallel(pfs, fm="pa", fa="fa") # Parallel says 5
MAP(pfs) # 1976 MAP says 1, 2000 says 3
library(EFA.dimensions)
MAP(pfs) # 1976 MAP says 1, 2000 says 3
fa.parallel(pfs, fm="pa", fa="both") # Parallel says 5
fa.parallel(pfs, fm="ml", fa="both") # Parallel says 5
describe(pfs)
pairs.panels(pfs)
lowerCor(pfs)
corPlot(pfs)
pairs.panels(pfs)
summary(m1_4)
summary(m1_4)
